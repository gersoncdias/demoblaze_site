name: CI/CD Pipeline

on:
  push:
    branches:
      - qa
      - main

jobs:
  deploy-qa:
    if: github.ref == 'refs/heads/qa'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v2

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Instalar Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build e Deploy para QA
        run: |
          echo "Deploy para QA na porta 8000"
          docker-compose down
          docker-compose up -d --build

  deploy-main:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v2

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Instalar Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build e Deploy para Produção
        run: |
          echo "Deploy para Produção na porta 8000"
          docker-compose down
          docker-compose up -d --build

      - name: Configurar o Git para usar o GITHUB_TOKEN
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Gerar nova versão e criar tag
        id: tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --prune --unshallow
          TAG="v1.0.$(date +'%Y%m%d%H%M%S')"
          echo "Nova versão: $TAG"
          git tag $TAG
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} $TAG
          echo "::set-output name=TAG::$TAG"

      - name: Criar Release no GitHub
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.TAG }}
          release_name: "Release ${{ steps.tag.outputs.TAG }}"
          draft: false
          prerelease: false
          body: "Nova release criada automaticamente pelo CI/CD pipeline."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
